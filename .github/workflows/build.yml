name: build

on:
  push:
    branches:
      - main
      - 'feature/**'
    tags:
      - v*

jobs:

  test:
    runs-on: ubuntu-latest

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: setup go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: test
        run: |
          curl -L https://github.com/gotestyourself/gotestsum/releases/download/v0.6.0/gotestsum_0.6.0_linux_amd64.tar.gz | sudo tar -C /usr/local/bin -xz
          gotestsum --format short-verbose --no-summary=skipped ./...

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]

    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: setup go
        uses: actions/setup-go@v2
        with:
          go-version: 1.15

      - name: prepare dist directory
        run: |
          mkdir -p dist/
          cp Dockerfile dist/

      - name: build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir $GITHUB_WORKSPACE/dist/${{ matrix.goos }}_${{ matrix.goarch }}
          go build -ldflags="-s -w" -o $GITHUB_WORKSPACE/dist/${{ matrix.goos }}_${{ matrix.goarch }}

      - name: store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            dist

  release:
    name: release
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: build docker image
        shell: bash
        run: |
          docker build linux_amd64 -t grpc-ditto -f Dockerfile

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ github.ref  }}
          draft: false
          prerelease: true

  upload-artifacts:
    name: upload-artifacts
    needs: release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64]

    steps:
      - name: download artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist

      - name: create package
        id: package
        run: |
          PACKAGE_NAME=grpc-ditto_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz
          find ${{ matrix.goos }}_${{ matrix.goarch }} -printf "%P\n" -type f -o -type l -o -type d | \
            tar -czvf $PACKAGE_NAME -C ${{ matrix.goos }}_${{ matrix.goarch }} -T -
          echo ::set-output name=name::${PACKAGE_NAME}

      - name: upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:  ${{ needs.release.outputs.release_url }}
          asset_path: ./${{ steps.package.outputs.name }}
          asset_name: ${{ steps.package.outputs.name }}
          asset_content_type: application/gzip
