// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: mocking_service.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AddMockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mock *DittoMock `protobuf:"bytes,1,opt,name=mock,proto3" json:"mock,omitempty"`
}

func (x *AddMockRequest) Reset() {
	*x = AddMockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMockRequest) ProtoMessage() {}

func (x *AddMockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMockRequest.ProtoReflect.Descriptor instead.
func (*AddMockRequest) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{0}
}

func (x *AddMockRequest) GetMock() *DittoMock {
	if x != nil {
		return x.Mock
	}
	return nil
}

type AddMockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddMockResponse) Reset() {
	*x = AddMockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMockResponse) ProtoMessage() {}

func (x *AddMockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMockResponse.ProtoReflect.Descriptor instead.
func (*AddMockResponse) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{1}
}

type DittoMock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *DittoRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *DittoResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DittoMock) Reset() {
	*x = DittoMock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DittoMock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DittoMock) ProtoMessage() {}

func (x *DittoMock) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DittoMock.ProtoReflect.Descriptor instead.
func (*DittoMock) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{2}
}

func (x *DittoMock) GetRequest() *DittoRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DittoMock) GetResponse() *DittoResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// DittoRequest represents request matching object. It matches requests first by method and then by patterns.
// All patterns must match in order for a request to match.
// If no matches are found the service will return ``Unimplemented`` grpc error.
// If there multiple matches are found the first one is what gets returned, the other ones will be ignored.
type DittoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// fully qualified grpc method like ``/package.full.name.UserService/Update``
	Method       string              `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	BodyPatterns []*DittoBodyPattern `protobuf:"bytes,2,rep,name=body_patterns,json=bodyPatterns,proto3" json:"body_patterns,omitempty"`
}

func (x *DittoRequest) Reset() {
	*x = DittoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DittoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DittoRequest) ProtoMessage() {}

func (x *DittoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DittoRequest.ProtoReflect.Descriptor instead.
func (*DittoRequest) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{3}
}

func (x *DittoRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DittoRequest) GetBodyPatterns() []*DittoBodyPattern {
	if x != nil {
		return x.BodyPatterns
	}
	return nil
}

type DittoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Struct conveniently represents any object that doesn't have a strict schema
	Body *structpb.Struct `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *DittoResponse) Reset() {
	*x = DittoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DittoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DittoResponse) ProtoMessage() {}

func (x *DittoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DittoResponse.ProtoReflect.Descriptor instead.
func (*DittoResponse) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{4}
}

func (x *DittoResponse) GetBody() *structpb.Struct {
	if x != nil {
		return x.Body
	}
	return nil
}

type DittoBodyPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Pattern:
	//	*DittoBodyPattern_EqualToJson
	//	*DittoBodyPattern_MatchesJsonpath
	Pattern isDittoBodyPattern_Pattern `protobuf_oneof:"pattern"`
}

func (x *DittoBodyPattern) Reset() {
	*x = DittoBodyPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DittoBodyPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DittoBodyPattern) ProtoMessage() {}

func (x *DittoBodyPattern) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DittoBodyPattern.ProtoReflect.Descriptor instead.
func (*DittoBodyPattern) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{5}
}

func (m *DittoBodyPattern) GetPattern() isDittoBodyPattern_Pattern {
	if m != nil {
		return m.Pattern
	}
	return nil
}

func (x *DittoBodyPattern) GetEqualToJson() *structpb.Struct {
	if x, ok := x.GetPattern().(*DittoBodyPattern_EqualToJson); ok {
		return x.EqualToJson
	}
	return nil
}

func (x *DittoBodyPattern) GetMatchesJsonpath() *JSONPathPattern {
	if x, ok := x.GetPattern().(*DittoBodyPattern_MatchesJsonpath); ok {
		return x.MatchesJsonpath
	}
	return nil
}

type isDittoBodyPattern_Pattern interface {
	isDittoBodyPattern_Pattern()
}

type DittoBodyPattern_EqualToJson struct {
	EqualToJson *structpb.Struct `protobuf:"bytes,1,opt,name=equal_to_json,json=equalToJson,proto3,oneof"`
}

type DittoBodyPattern_MatchesJsonpath struct {
	MatchesJsonpath *JSONPathPattern `protobuf:"bytes,2,opt,name=matches_jsonpath,json=matchesJsonpath,proto3,oneof"`
}

func (*DittoBodyPattern_EqualToJson) isDittoBodyPattern_Pattern() {}

func (*DittoBodyPattern_MatchesJsonpath) isDittoBodyPattern_Pattern() {}

// JSONPath pattern supports JSONPath spec
//
//Examples
//^^^^^^^^
//
//{ "expression": "$.message_type", "eq": "resource" }
//{ "expression": "$.message_type", "contains": "re" }
//{ "expression": "$.name", "regexp": "^callback[-]svc.*$" }
type JSONPathPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression string `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	// Types that are assignable to Operator:
	//	*JSONPathPattern_Contains
	//	*JSONPathPattern_Eq
	//	*JSONPathPattern_Regexp
	Operator isJSONPathPattern_Operator `protobuf_oneof:"operator"`
}

func (x *JSONPathPattern) Reset() {
	*x = JSONPathPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONPathPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONPathPattern) ProtoMessage() {}

func (x *JSONPathPattern) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONPathPattern.ProtoReflect.Descriptor instead.
func (*JSONPathPattern) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{6}
}

func (x *JSONPathPattern) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (m *JSONPathPattern) GetOperator() isJSONPathPattern_Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func (x *JSONPathPattern) GetContains() string {
	if x, ok := x.GetOperator().(*JSONPathPattern_Contains); ok {
		return x.Contains
	}
	return ""
}

func (x *JSONPathPattern) GetEq() string {
	if x, ok := x.GetOperator().(*JSONPathPattern_Eq); ok {
		return x.Eq
	}
	return ""
}

func (x *JSONPathPattern) GetRegexp() string {
	if x, ok := x.GetOperator().(*JSONPathPattern_Regexp); ok {
		return x.Regexp
	}
	return ""
}

type isJSONPathPattern_Operator interface {
	isJSONPathPattern_Operator()
}

type JSONPathPattern_Contains struct {
	Contains string `protobuf:"bytes,2,opt,name=contains,proto3,oneof"`
}

type JSONPathPattern_Eq struct {
	Eq string `protobuf:"bytes,3,opt,name=eq,proto3,oneof"`
}

type JSONPathPattern_Regexp struct {
	Regexp string `protobuf:"bytes,4,opt,name=regexp,proto3,oneof"`
}

func (*JSONPathPattern_Contains) isJSONPathPattern_Operator() {}

func (*JSONPathPattern_Eq) isJSONPathPattern_Operator() {}

func (*JSONPathPattern_Regexp) isJSONPathPattern_Operator() {}

type ClearRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearRequest) Reset() {
	*x = ClearRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearRequest) ProtoMessage() {}

func (x *ClearRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearRequest.ProtoReflect.Descriptor instead.
func (*ClearRequest) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{7}
}

type ClearResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClearResponse) Reset() {
	*x = ClearResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mocking_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearResponse) ProtoMessage() {}

func (x *ClearResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mocking_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearResponse.ProtoReflect.Descriptor instead.
func (*ClearResponse) Descriptor() ([]byte, []int) {
	return file_mocking_service_proto_rawDescGZIP(), []int{8}
}

var File_mocking_service_proto protoreflect.FileDescriptor

var file_mocking_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x6d, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x04,
	0x6d, 0x6f, 0x63, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x0a, 0x09, 0x44, 0x69, 0x74, 0x74, 0x6f,
	0x4d, 0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69,
	0x74, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0x0a, 0x0c, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x50, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x0c, 0x62, 0x6f, 0x64, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0d, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x42, 0x6f, 0x64, 0x79, 0x50,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x5f,
	0x74, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x54,
	0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x70, 0x61,
	0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x0f, 0x4a, 0x53, 0x4f, 0x4e, 0x50, 0x61, 0x74, 0x68, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12,
	0x10, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x65,
	0x71, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9e, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x4d, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74,
	0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x1b,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x64, 0x69, 0x74, 0x74, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x17, 0x5a, 0x05, 0x2e, 0x3b, 0x61,
	0x70, 0x69, 0xaa, 0x02, 0x0d, 0x47, 0x72, 0x70, 0x63, 0x44, 0x69, 0x74, 0x74, 0x6f, 0x2e, 0x41,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mocking_service_proto_rawDescOnce sync.Once
	file_mocking_service_proto_rawDescData = file_mocking_service_proto_rawDesc
)

func file_mocking_service_proto_rawDescGZIP() []byte {
	file_mocking_service_proto_rawDescOnce.Do(func() {
		file_mocking_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_mocking_service_proto_rawDescData)
	})
	return file_mocking_service_proto_rawDescData
}

var file_mocking_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mocking_service_proto_goTypes = []interface{}{
	(*AddMockRequest)(nil),   // 0: grpcditto.api.AddMockRequest
	(*AddMockResponse)(nil),  // 1: grpcditto.api.AddMockResponse
	(*DittoMock)(nil),        // 2: grpcditto.api.DittoMock
	(*DittoRequest)(nil),     // 3: grpcditto.api.DittoRequest
	(*DittoResponse)(nil),    // 4: grpcditto.api.DittoResponse
	(*DittoBodyPattern)(nil), // 5: grpcditto.api.DittoBodyPattern
	(*JSONPathPattern)(nil),  // 6: grpcditto.api.JSONPathPattern
	(*ClearRequest)(nil),     // 7: grpcditto.api.ClearRequest
	(*ClearResponse)(nil),    // 8: grpcditto.api.ClearResponse
	(*structpb.Struct)(nil),  // 9: google.protobuf.Struct
}
var file_mocking_service_proto_depIdxs = []int32{
	2, // 0: grpcditto.api.AddMockRequest.mock:type_name -> grpcditto.api.DittoMock
	3, // 1: grpcditto.api.DittoMock.request:type_name -> grpcditto.api.DittoRequest
	4, // 2: grpcditto.api.DittoMock.response:type_name -> grpcditto.api.DittoResponse
	5, // 3: grpcditto.api.DittoRequest.body_patterns:type_name -> grpcditto.api.DittoBodyPattern
	9, // 4: grpcditto.api.DittoResponse.body:type_name -> google.protobuf.Struct
	9, // 5: grpcditto.api.DittoBodyPattern.equal_to_json:type_name -> google.protobuf.Struct
	6, // 6: grpcditto.api.DittoBodyPattern.matches_jsonpath:type_name -> grpcditto.api.JSONPathPattern
	0, // 7: grpcditto.api.MockingService.AddMock:input_type -> grpcditto.api.AddMockRequest
	7, // 8: grpcditto.api.MockingService.Clear:input_type -> grpcditto.api.ClearRequest
	1, // 9: grpcditto.api.MockingService.AddMock:output_type -> grpcditto.api.AddMockResponse
	8, // 10: grpcditto.api.MockingService.Clear:output_type -> grpcditto.api.ClearResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_mocking_service_proto_init() }
func file_mocking_service_proto_init() {
	if File_mocking_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mocking_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DittoMock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DittoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DittoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DittoBodyPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JSONPathPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mocking_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mocking_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*DittoBodyPattern_EqualToJson)(nil),
		(*DittoBodyPattern_MatchesJsonpath)(nil),
	}
	file_mocking_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*JSONPathPattern_Contains)(nil),
		(*JSONPathPattern_Eq)(nil),
		(*JSONPathPattern_Regexp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mocking_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mocking_service_proto_goTypes,
		DependencyIndexes: file_mocking_service_proto_depIdxs,
		MessageInfos:      file_mocking_service_proto_msgTypes,
	}.Build()
	File_mocking_service_proto = out.File
	file_mocking_service_proto_rawDesc = nil
	file_mocking_service_proto_goTypes = nil
	file_mocking_service_proto_depIdxs = nil
}
